#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

'''
#
'''

import sys
import argparse
import redis
import struct, socket
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.ticker
import numpy as np
import ast
from pprint import pprint
from statistics import mean, median, pstdev, pvariance


# CONFIG #
dataset = "blackhole27"


def make_stat():
    print("Computing Stats")

    dico_malware_filename = {}
    dico_proto = {}
    with open("extracted_urls.output", "r") as f:
        for line in f.readlines():
            read_dico = ast.literal_eval(line)
            if read_dico['type'] == 'option':
                timestamp = read_dico['timestamp']
                options = read_dico['option']
                for option in options:
                    usedProto = option['proto']
                    try:
                        if usedProto == 'tftp':
                            filename = option['-r']
                        elif usedProto == 'nc':
                            filename = option[''].split('>')[1][1:]
                        elif usedProto == 'wget':
                            if '-q' in option:
                                filename = option['-q'].split('/')[-1]
                            else:
                                filename = option[''].split('/')[-1]
                        elif usedProto == 'curl':
                            filename = option['-O'].split('/')[-1]
                        try: #initialize the key
                            dico_malware_filename[filename].append(timestamp)
                        except KeyError:
                            dico_malware_filename[filename] = [timestamp]
                        try: #initialize the key
                            dico_proto[usedProto].append(timestamp)
                        except KeyError:
                            dico_proto[usedProto] = [timestamp]

                    except KeyError: #invalid option
                        pass

    pprint(dico_proto)
    pprint(dico_malware_filename)

    with open('make_stats_malware_version_over_time.output', 'w') as f:
        f.write(str([dico_malware_filename, dico_proto]))



  
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Makes stats about the frequency of IP within a acceptation window')
    args = parser.parse_args()
    
    make_stat()

