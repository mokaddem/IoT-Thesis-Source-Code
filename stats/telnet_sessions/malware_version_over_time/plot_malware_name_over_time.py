#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.dates import MONDAY
from matplotlib.finance import quotes_historical_yahoo_ochl
from matplotlib.dates import MonthLocator, WeekdayLocator, DateFormatter
import ast
import sys
import numpy as np
from pprint import pprint

THRESHOLD = 20

with open("make_stats_malware_name_over_time.output", "r") as f:
    temp = f.read()

baseList = ast.literal_eval(temp)
dico_name = baseList[0]
tot_occ_name = 0


dates_name = []
y_name = []

temp_name = []
dico_name_to_timestamp = {}

mapping_name_toSort = {}
mapping_name_sum = {}
cur_num = 1
timestamp_max = 0.
for name, timestamps in dico_name.items():
    for timestamp in timestamps:
        timestamp_max = float(timestamp) if float(timestamp) > timestamp_max else timestamp_max
        if name not in mapping_name_toSort:
            dico_name_to_timestamp[name] = []
            mapping_name_toSort[name] = cur_num
            mapping_name_sum[name] = 0
            cur_num += 1
        temp_name.append([datetime.fromtimestamp(float(timestamp)), name])
        dico_name_to_timestamp[name].append(datetime.fromtimestamp(float(timestamp)))
        mapping_name_sum[name] += 1
timestamp_max = datetime.fromtimestamp(float(timestamp_max))

to_ignore = [name for name in dico_name_to_timestamp if len(dico_name_to_timestamp[name]) < THRESHOLD]
dico_name_to_timestamp_filtered = {}
for name in dico_name_to_timestamp:
    if name in to_ignore:
        continue
    dico_name_to_timestamp_filtered[name] = dico_name_to_timestamp[name]

sorted_sum = []
for k, summ in mapping_name_sum.items():
    tot_occ_name += summ
    sorted_sum.append([k, summ])
sorted_sum.sort(key=lambda x: x[1])

mapping_name_num = {}
i = 0
for tup in sorted_sum:
    k, summ = tup
    if k in to_ignore:
        continue
    mapping_name_num[i] = k
    i += 1

mapping_name_num_rev = {}
for k,v in mapping_name_num.items():
    if k in to_ignore:
        continue
    mapping_name_num_rev[v] = k


temp_name.sort(key= lambda x: x[0])

for tab in temp_name:
    d, name = tab
    if name in to_ignore:
        continue
    dates_name.append(d)
    y_name.append(mapping_name_num_rev[name])

txt = ""

#plot

fig, ax_name = plt.subplots()

dico_first_appear = {}
for name, timeArr in dico_name_to_timestamp_filtered.items():
    p = ax_name.plot([min(timeArr)], [mapping_name_num_rev[name]], linestyle='None', marker='o', markersize=7)
    used_color = p[0]._color
    ax_name.plot([min(timeArr), timestamp_max], [mapping_name_num_rev[name]]*2, linewidth=3, color=used_color)
    dico_first_appear[name] = min(timeArr)
    #annonate
    ax_name.annotate("{:.2%}".format(len(timeArr)/tot_occ_name), xy=(min(timeArr), mapping_name_num_rev[name]+0.2))

for name, timestamp in dico_first_appear.items():
    ax_name.plot([timestamp], [-1], linestyle='None', marker='*', markersize=12, color='r')


# every monday
mondays = WeekdayLocator(MONDAY)
months = MonthLocator(range(1, 13), bymonthday=1)
monthsFmt = DateFormatter("%d %b '%y")

ax_name.xaxis.set_major_locator(mondays)
ax_name.xaxis.set_major_formatter(monthsFmt)
ax_name.autoscale_view()

fig.autofmt_xdate()

ax_name.set_title("Commands launch and the /bin/busybox by the remote devices over time (filtered < "+str(THRESHOLD)+")")
ax_name.yaxis.grid(True, which='both')
ax_name.xaxis.grid(True, which='both')
ax_name.set_xlabel("Date")
ax_name.set_ylabel("Filename")

#fig.text(.7, .3, txt, bbox={'facecolor':'yellow', 'alpha':0.5, 'pad':10})

ax_name.set_yticks([x for x in range(-2, len(mapping_name_num)+1)])

fig.canvas.draw()

labels = [i.get_text() for i in ax_name.get_yticklabels()]
for i, lb in enumerate(labels):
    try:
        lb = int(lb)
    except ValueError:
        if '1' in lb:
            labels[i] = "New occurence"
        else:
            labels[i] = ""
        continue
    if lb not in mapping_name_num:
        labels[i] = ""
    else:
        labels[i] = mapping_name_num[lb]
ax_name.set_yticklabels(labels)

plt.show()
