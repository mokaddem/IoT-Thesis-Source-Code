#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.dates import MONDAY
from matplotlib.finance import quotes_historical_yahoo_ochl
from matplotlib.dates import MonthLocator, WeekdayLocator, DateFormatter
import ast
import sys
import numpy as np
from pprint import pprint



with open("make_stats_malware_version_over_time.output", "r") as f:
    temp = f.read()

baseList = ast.literal_eval(temp)
dico_filename, dico_proto = baseList

#dico_stat = baseList[2]

dates_proto = []
y_proto = []
dates_fn = []
y_fn = []

temp_proto = []
temp_fn = []

num_proto = { 'tftp': 0, 'nc': 0, 'wget': 0, 'curl': 0}
num_proto_sum = 0

mapping_proto_num = { 'tftp': 1, 'nc': 2, 'wget': 3, 'curl': 4}
mapping_proto_num_rev = { 1: 'tftp', 2: 'nc', 3: 'wget', 4: 'curl'}
for proto, timestamps in dico_proto.items():
    for timestamp in timestamps:
        temp_proto.append([datetime.fromtimestamp(float(timestamp)), mapping_proto_num[proto]])
        num_proto[proto] += 1
        num_proto_sum += 1

mapping_fn_num = {}
cur_num = 1
for fn, timestamps in dico_filename.items():
    for timestamp in timestamps:
        if fn not in mapping_fn_num:
            mapping_fn_num[fn] = cur_num
            cur_num += 1
        temp_fn.append([datetime.fromtimestamp(float(timestamp)), mapping_fn_num[fn]])

mapping_fn_num_rev = {}
for k,v in mapping_fn_num.items():
    mapping_fn_num_rev[v] = k


temp_proto.sort(key= lambda x: x[0])
temp_fn.sort(key= lambda x: x[0])

for tab in temp_proto:
    d, val = tab
    dates_proto.append(d)
    y_proto.append(val)

for tab in temp_fn:
    d, val = tab
    dates_fn.append(d)
    y_fn.append(val)

txt = ""

#plot

fig, (ax_proto, ax_fn) = plt.subplots(nrows=2, ncols = 1)

ax_proto.plot(dates_proto, y_proto, linestyle='None', marker='o')
ax_fn.plot(dates_fn, y_fn, linestyle='None', marker='o')

# every monday
mondays = WeekdayLocator(MONDAY)
months = MonthLocator(range(1, 13), bymonthday=1)
monthsFmt = DateFormatter("%d %b '%y")
ax_proto.xaxis.set_major_locator(mondays)
ax_proto.xaxis.set_major_formatter(monthsFmt)
ax_proto.autoscale_view()

ax_fn.xaxis.set_major_locator(mondays)
ax_fn.xaxis.set_major_formatter(monthsFmt)
ax_fn.autoscale_view()

fig.autofmt_xdate()

ax_proto.set_title("Utlisation of fetching protocols over time")
ax_proto.yaxis.grid(True, which='both')
ax_proto.xaxis.grid(True, which='both')
ax_proto.set_xlabel("Date")
ax_proto.set_ylabel("Protocol")

ax_fn.set_title("Filenames fetch requested by the remote devices over time")
ax_fn.yaxis.grid(True, which='both')
ax_fn.xaxis.grid(True, which='both')
ax_fn.set_xlabel("Date")
ax_fn.set_ylabel("Filename")

ax_proto.set_yticks([0,1,2,3,4,5])
ax_fn.set_yticks([0,1,2,3,4,5,6])

fig.canvas.draw()

labels = [i.get_text() for i in ax_proto.get_yticklabels()]
for i, lb in enumerate(labels):
    lb = int(lb)
    if lb not in mapping_proto_num_rev:
        labels[i] = ""
    else:
        labels[i] = mapping_proto_num_rev[lb]
ax_proto.set_yticklabels(labels)

labels = [i.get_text() for i in ax_fn.get_yticklabels()]
for i, lb in enumerate(labels):
    lb = int(lb)
    if lb not in mapping_fn_num_rev:
        labels[i] = ""
    else:
        labels[i] = mapping_fn_num_rev[lb]
ax_fn.set_yticklabels(labels)
plt.show()

sizes = []
labels = []
explode = []
iterat = 0.0
for proto, val in num_proto.items():
    iterat += 0.05
    sizes += [val / num_proto_sum]
    labels += [proto]
    explode += [iterat]

fig1, ax1 = plt.subplots()
ax1.set_title("Percentages of utilisation for fetching protocols")
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
