#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.gridspec as gridspec
import ast
import sys
import numpy as np
import math
import json
from pprint import pprint
from statistics import mean, median, pstdev, pvariance
import sys

# CONFIG #
dataset = "blackhole27"
thres_om = 50

with open("make_stats_telnet_set_malware_distri_or_cred_bruteforce.output", "r") as f:
    global_array = json.load(f)


dico_windows_repartition = global_array[0]
dico_cdf_duration = global_array[1]
dico_ip_occ_per_day_pos = global_array[2]
dico_intersect = global_array[3]

''' windows repartition '''

x = []
y_brute_cumu = []
y_distri_cumu = []

y_brute_max = []
y_distri_max = []


bruteforce = ast.literal_eval(dico_intersect['dic_intersect_brute'])
distri = ast.literal_eval(dico_intersect['dic_intersect_distri'])
bruteforce_max = ast.literal_eval(dico_intersect['dic_max_len_per_window'])['dic_max_len_per_window_brute']
distri_max = ast.literal_eval(dico_intersect['dic_max_len_per_window'])['dic_max_len_per_window_distri']

tot_num_brute = 0
tot_num_distri = 0
tot_num_brute_max = 0
tot_num_distri_max = 0
for window in bruteforce:
    x.append(int(window))
    y_brute_cumu.append(len(bruteforce[window]))
    y_distri_cumu.append(len(distri[window]))

    tot_num_brute += len(bruteforce[window])
    tot_num_distri += len(distri[window])

    y_brute_max.append(bruteforce_max[window]['max_intersect_range'])
    y_distri_max.append(distri_max[window]['max_intersect_range'])
    
    tot_num_brute_max += bruteforce_max[window]['max_intersect_range']
    tot_num_distri_max += distri_max[window]['max_intersect_range']


x = np.array(x)
#plot

#annotate bars
def autolabel(rects, ax, the_max, under=False, into_week=False):
    """
    Attach a text label above each bar displaying its height
    """
    for i, rect in enumerate(rects):
        #if i == 1:
        #    continue
        height = rect.get_height()
        y_under = 0 if under == False else -0.15

        try:
            perc = int(height)/the_max
        except ZeroDivisionError:
            perc = 0
        if into_week and int(height)>7:
            weeks = int(int(height) / 7)
            days = int(height) % 7
            if days > 0:
                combi_str = str(weeks) + "W " + str(days) + "d"
            else:
                combi_str = str(weeks) + "Weeks"

            ax.text(rect.get_x() + rect.get_width()/2., height+y_under, 
                    "{}\n{} ({:.1%})".format(combi_str, int(height), perc),
                    ha='center', va='bottom')
        else:
            ax.text(rect.get_x() + rect.get_width()/2., height+y_under, 
                    "{} ({:.1%})".format(int(height), perc),
                    ha='center', va='bottom')


fig, (ax_cumu, ax_max) = plt.subplots(nrows=2, ncols = 1)

barwidth = 0.50
barOff = 0.50
bars1 = ax_cumu.bar(x, y_brute_cumu, color='b', width=barwidth)
bars2 = ax_cumu.bar(x+barwidth+barOff, y_distri_cumu, color='g', width=barwidth)

bars3 = ax_max.bar(x, y_brute_max, color='b', width=barwidth)
bars4 = ax_max.bar(x+barwidth+barOff, y_distri_max, color='g', width=barwidth)


ax_cumu.set_xticks([lb for lb in x])
ax_cumu.set_yticks([-1,0,1,2])
ax_max.set_xticks([lb for lb in x])

ax_cumu.yaxis.grid(True, which='both')
ax_max.yaxis.grid(True, which='both')

ax_cumu.set_ylabel("Cardinality of the intersection")
ax_cumu.set_xlabel("Window size (day)")
ax_cumu.set_title("Cardinality of the intersection of all to set within their windows for IPs distributing malware and bruteforcing credentials")
ax_max.set_ylabel("Maximum range (days)")
ax_max.set_xlabel("Window size (day)")
ax_max.set_title("Maximum range (long living) of IPs accross windows for IPs distributing malware and bruteforcing credentials")


text_info = ""
text_info += "Total number of sets: {}\n".format(int(tot_num_brute))
text_info += "Total number of IPs: {}\n".format(int(tot_num_brute))

autolabel(bars1, ax_cumu, tot_num_brute)
autolabel(bars2, ax_cumu, tot_num_distri, under=True)

autolabel(bars3, ax_max, tot_num_brute_max, into_week=True)
autolabel(bars4, ax_max, tot_num_distri_max, into_week=True)

plt.legend(['Bruteforcing IP', 'Distributing malware IP'], loc='best')


fig.canvas.draw()

labels = [i.get_text() for i in ax_cumu.get_xticklabels()]


plt.show()
