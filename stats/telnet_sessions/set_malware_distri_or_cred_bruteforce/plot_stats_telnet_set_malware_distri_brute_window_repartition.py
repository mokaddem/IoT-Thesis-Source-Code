#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.gridspec as gridspec
import ast
import sys
import numpy as np
import math
import json
from pprint import pprint
from statistics import mean, median, pstdev, pvariance
import sys

# CONFIG #
dataset = "blackhole27"
thres_om = 50

with open("make_stats_telnet_set_malware_distri_or_cred_bruteforce.output", "r") as f:
    global_array = json.load(f)


dico_windows_repartition = global_array[0]
dico_cdf_duration = global_array[1]
dico_ip_occ_per_day_pos = global_array[2]
dico_intersect = global_array[3]

''' windows repartition '''

x = []
x_uniq = []
y = []
y_uniq = []

bruteforce = dico_windows_repartition['sorted_weighted_brute']
bruteforce_uniq = dico_windows_repartition['sorted_weighted_brute_uniq']
distri = dico_windows_repartition['sorted_weighted_distri']
distri_uniq = dico_windows_repartition['sorted_weighted_distri_uniq']

to_process_name = "distributing credentials"
to_process1 = distri
to_process2 = distri_uniq
to_process_cdf = dico_cdf_duration['cdf_distri']
to_process_cdf_uniq = dico_cdf_duration['cdf_distri_uniq']

'''bruteforce'''
y_tot = to_process1[0][1][0]
total_sum = y_tot
x = [0]
y = [0]
for elem in to_process1[1:]:
    window, tab = elem
    occ, perc = tab
    x.append(window)
    y.append(occ)

y_cdf_temp = [(total_sum-sum(to_process_cdf))/total_sum]
y_cdf_temp += [val / total_sum for val in to_process_cdf]
y_cdf = []
cur_sum = 0
#for val in to_process_cdf:
for val in y_cdf_temp:
    cur_sum += val
    y_cdf += [cur_sum]


#adjust to get the max
max_y = max(y)
y_cdf = [100*val for val in y_cdf]


'''bruteforce unique'''
y_tot_uniq = to_process2[0][1][0]
total_sum_uniq = y_tot_uniq
x_uniq = [0]
y_uniq = [0]
for elem in to_process2[1:]:
    window, tab = elem
    occ, perc = tab
    x_uniq.append(window)
    y_uniq.append(occ)

y_cdf_temp = [(total_sum_uniq-sum(to_process_cdf_uniq))/total_sum]
y_cdf_temp += [val / total_sum_uniq for val in to_process_cdf_uniq]
y_cdf_uniq = []
cur_sum = 0
for val in y_cdf_temp:
    cur_sum += val
    y_cdf_uniq += [cur_sum]

#adjust to get the max
max_y_uniq = max(y_uniq)
y_cdf_uniq = [100*val for val in y_cdf_uniq]



#plot

#annotate bars
def autolabel(rects, ax):
    """
    Attach a text label above each bar displaying its height
    """
    for i, rect in enumerate(rects):
        #if i == 1:
        #    continue
        height = rect.get_height()
        if height <= 0:
            continue
        ax.text(rect.get_x() + rect.get_width()/2., 2+height, 
                "{}".format(int(height)),
                ha='center', va='bottom')
#annotate curve
def autolabel2(ax, max_y):
    """tot_number_of_session
    Attach a text label above each bar displaying its height
    """
    xy = ax.lines[0].get_xydata()
    for i, tab in enumerate(xy[:-1]):
        if i not in [0,2,4,10]:
        #if i not in [1]:
            continue
        x, y = tab
        if y <= 0:
            continue
        ax.text(x, 2+y, 
                "{:.2%}".format(y/100),
                ha='center', va='bottom')
    #add last 100%
    ax.text(xy[-1][0]+6, xy[-1][1]-0.7, 
            "{}".format('100%'),
            ha='center', va='bottom')

print("plotting")

fig, ax = plt.subplots()

bars1 = ax.bar(x, y, align='center', color='b', width=1.0)
bars2 = ax.bar(x_uniq, y_uniq, align='center', color='g', width=1.0)
cdf = ax.plot(x, y_cdf, marker='o', color='r')
ax.set_xticks([x for x in range(0, 168+2, 6)])
ax.set_yticks([x for x in range(0, 140, 20)]+[130])

ax.yaxis.grid(True, which='both')

ax.set_ylabel("Occurences")
ax.set_xlabel("Size of the window (Days)")
ax.set_title("Repartition of the IP occurences' average within differents windows: IP "+to_process_name)

text_info = ""
text_info += "Total number of ip "+to_process_name+": {}\n".format(total_sum)
text_info += "Total number of unique ip "+to_process_name+": {}".format(total_sum_uniq)

fig.text(0.14, .75, text_info, bbox={'facecolor':'yellow', 'alpha':0.5, 'pad':10})
autolabel(bars1, ax)
autolabel2(ax, max_y)
plt.legend(['CDF occurences', 'Occurences', 'Occurences by unique IP'], loc='upper left')


fig.canvas.draw()

labels = [i.get_text() for i in ax.get_xticklabels()]
for i, lb in enumerate(labels):
    accept = [0,6,12,18,24]+[x for x in range(48,169,24)]
    if int(lb) in accept:
        if int(lb) < 24:
            labels[i] = "{:.2}".format(int(lb)/24)
        else:
            labels[i] = "{}".format(int(int(lb)/24))
    else:
        labels[i] = ''

ax.set_xticklabels(labels)

plt.show()
