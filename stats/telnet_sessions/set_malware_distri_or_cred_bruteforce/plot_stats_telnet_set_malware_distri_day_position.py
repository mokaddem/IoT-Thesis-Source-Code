#!/usr/bin/env python3.5
# -*-coding:UTF-8 -*

from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.gridspec as gridspec
import ast
import sys
import numpy as np
import math
import json
from pprint import pprint
from statistics import mean, median, pstdev, pvariance
import sys

# CONFIG #
dataset = "blackhole27"
thres_om = 50

with open("make_stats_telnet_set_malware_distri_or_cred_bruteforce.output", "r") as f:
    global_array = json.load(f)


dico_windows_repartition = global_array[0]
dico_cdf_duration = global_array[1]
dico_ip_occ_per_day_pos = global_array[2]
dico_intersect = global_array[3]

''' windows repartition '''

pprint(dico_intersect)
x = []
y_brute = []
y_brute_uniq = []

y_distri = []
y_distri_uniq = []

bruteforce = dico_ip_occ_per_day_pos['dico_daypos_brute']
bruteforce_uniq = dico_ip_occ_per_day_pos['dico_daypos_brute_uniq']
distri = dico_ip_occ_per_day_pos['dico_daypos_distri']
distri_uniq = dico_ip_occ_per_day_pos['dico_daypos_distri_uniq']

tot_num_brute = 0
tot_num_brute_uniq = 0
tot_num_distri = 0
tot_num_distri_uniq = 0
for daypos in dico_ip_occ_per_day_pos['dico_daypos_brute']:
    x.append(int(daypos))
    y_brute.append(bruteforce[daypos])
    y_brute_uniq.append(bruteforce_uniq[daypos])
    y_distri.append(distri[daypos])
    y_distri_uniq.append(distri_uniq[daypos])
    tot_num_brute += bruteforce[daypos]
    tot_num_brute_uniq += bruteforce_uniq[daypos]
    tot_num_distri += distri[daypos]
    tot_num_distri_uniq += distri_uniq[daypos]

x = np.array(x)
#plot

#annotate bars
def autolabel(rects, ax, the_max):
    """
    Attach a text label above each bar displaying its height
    """
    for i, rect in enumerate(rects):
        #if i == 1:
        #    continue
        height = rect.get_height()
        if height <= 0:
            continue
        ax.text(rect.get_x() + rect.get_width()/2., 2+height, 
                "{} - {:.1%}".format(int(height), int(height)/the_max),
                ha='center', va='bottom')


fig, ax = plt.subplots()

barwidth = 0.15
barOff = 0.05
bars1 = ax.bar(x, y_brute, color='b', width=barwidth)
bars2 = ax.bar(x+barwidth+barOff, y_brute_uniq, color='g', width=barwidth)
bars3 = ax.bar(x+2*barwidth+2*barOff, y_distri, color='y', width=barwidth)
bars4 = ax.bar(x+3*barwidth+3*barOff, y_distri_uniq, color='r', width=barwidth)

ax.set_xticks([x for x in range(0, 4, 1)])
#ax.set_yticks([x for x in range(0, 140, 20)]+[130])

ax.yaxis.grid(True, which='both')

ax.set_ylabel("Occurences")
ax.set_xlabel("Different windows during a day")
ax.set_title("Repartition of the IP occurences' during a day for IP distributing malware (with NC, TFTP, CURL and WGET) and bruteforcing credentials")

ax.set_yscale("log")

text_info = ""
text_info += "Total number of bruteforcing ip: {}\n".format(int(tot_num_brute))
text_info += "Total number of unique ip: {}\n".format(int(tot_num_brute_uniq))
text_info += "Total number of ip distributing malware: {}\n".format(int(tot_num_distri))
text_info += "Total number of unique ip distributing malware: {}".format(int(tot_num_distri_uniq))

fig.text(0.14, .82, text_info, bbox={'facecolor':'yellow', 'alpha':0.5, 'pad':10})
autolabel(bars1, ax, tot_num_brute)
autolabel(bars2, ax, tot_num_brute_uniq)
autolabel(bars3, ax, tot_num_distri)
autolabel(bars4, ax, tot_num_distri_uniq)
plt.legend(['Bruteforcing IP', 'Bruteforcing unique IP', 'Distributing malware IP', 'Distributing malware unique IP'], loc='best')


fig.canvas.draw()

labels = [i.get_text() for i in ax.get_xticklabels()]
for i, lb in enumerate(labels):
    if lb == '0':
        labels[i] = '0-6h'
    elif lb == '1':
        labels[i] = '6h-12h'
    elif lb == '2':
        labels[i] = '12h-18h'
    elif lb == '3':
        labels[i] = '18h-24h'

ax.set_xticklabels(labels)

plt.show()
